{"ast":null,"code":"/**\n * Formats a number of minutes as 'mm:00'.\n\nexport function minutesToDuration(givenMinutes) {\n  const minutes = Math.floor(givenMinutes).toString().padStart(2, \"0\");\n  return `${minutes}:00`;\n}\n\n/**\n * Formats a number of seconds as 'mm:ss'.\n *\n * For example,\n *    secondsToDuration(305) = '05:05'\n *    secondsToDuration(930) = '15:30'\n *\n * @param givenSeconds\n *    the number of seconds in the duration\n * @returns {string}\n *    the given seconds formatted as 'mm:ss'\n */\nexport function secondsToDuration(givenSeconds) {\n  const minutes = Math.floor(givenSeconds % 3600 / 60).toString().padStart(2, \"0\");\n  const seconds = Math.round(givenSeconds % 60).toString().padStart(2, \"0\");\n  return `${minutes}:${seconds}`;\n}","map":{"version":3,"sources":["/Users/luislopez/Project_Pomodoro_Timer_Qualified_1/src/utils/duration/index.js"],"names":["secondsToDuration","givenSeconds","minutes","Math","floor","toString","padStart","seconds","round"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAO,SAASA,iBAAT,CAA2BC,YAA3B,EAAyC;AAC9C,QAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAYH,YAAY,GAAG,IAAhB,GAAwB,EAAnC,EACbI,QADa,GAEbC,QAFa,CAEJ,CAFI,EAED,GAFC,CAAhB;AAGA,QAAMC,OAAO,GAAGJ,IAAI,CAACK,KAAL,CAAWP,YAAY,GAAG,EAA1B,EACbI,QADa,GAEbC,QAFa,CAEJ,CAFI,EAED,GAFC,CAAhB;AAGA,SAAQ,GAAEJ,OAAQ,IAAGK,OAAQ,EAA7B;AACD","sourcesContent":["/**\n * Formats a number of minutes as 'mm:00'.\n\nexport function minutesToDuration(givenMinutes) {\n  const minutes = Math.floor(givenMinutes).toString().padStart(2, \"0\");\n  return `${minutes}:00`;\n}\n\n/**\n * Formats a number of seconds as 'mm:ss'.\n *\n * For example,\n *    secondsToDuration(305) = '05:05'\n *    secondsToDuration(930) = '15:30'\n *\n * @param givenSeconds\n *    the number of seconds in the duration\n * @returns {string}\n *    the given seconds formatted as 'mm:ss'\n */\n\nexport function secondsToDuration(givenSeconds) {\n  const minutes = Math.floor((givenSeconds % 3600) / 60)\n    .toString()\n    .padStart(2, \"0\");\n  const seconds = Math.round(givenSeconds % 60)\n    .toString()\n    .padStart(2, \"0\");\n  return `${minutes}:${seconds}`;\n}\n"]},"metadata":{},"sourceType":"module"}